@using System.Text.RegularExpressions;
@using System.Web;
<MudDialog>
    <TitleContent>
        <MudContainer Class="d-flex flex-row flex-grow-1 gap-1 justify-start align-center" Style="margin-left: -24px;">
            @if (MessageType == MessageType.Info)
            {
                <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Medium"></MudIcon>
                <MudText Typo="Typo.h5">Info</MudText>
            }
            else if (MessageType == MessageType.Warning)
            {
                <MudIcon Icon="@Icons.Material.Filled.Warning" Size="Size.Medium"></MudIcon>
                <MudText Typo="Typo.h5">Warning</MudText>
            }
            else if (MessageType == MessageType.Error)
            {
                <MudIcon Icon="@Icons.Material.Filled.Error" Size="Size.Medium"></MudIcon>
                <MudText Typo="Typo.h5">Error</MudText>
            }
            else if (MessageType == MessageType.Ask)
            {
                <MudIcon Icon="@Icons.Material.Filled.QuestionMark" Size="Size.Medium"></MudIcon>
                <MudText Typo="Typo.h5"></MudText>
            }
            else if (MessageType == MessageType.Confirm)
            {
                <MudIcon Icon="@Icons.Material.Filled.QuestionAnswer" Size="Size.Medium"></MudIcon>
                <MudText Typo="Typo.h5">Confirm</MudText>
            }
        </MudContainer>
    </TitleContent>
    <DialogContent>
        @if (MessageType == MessageType.Loading)
        {
            <img src="_content/LeaderAnalytics.MessageBox.Blazor/wait.gif" style="height:30px;width:30px;margin-right:15px;" /> <span>@MessageVisuals.Message</span>
        }
        else
        {
            // Preserve line breaks
            <MudText>@((MarkupString)Regex.Replace(HttpUtility.HtmlEncode(@MessageVisuals.Message), "\r?\n|\r", "<br />"))</MudText>
        }
    </DialogContent>
    <DialogActions>

        <MudButton @ref="primaryButton" Color="Color.Primary" OnClick="SubmitHandler">@MessageVisuals.Button1Text</MudButton>

        @if (!string.IsNullOrEmpty(MessageVisuals.Button2Text))
        {
            <MudButton OnClick="CancelHandler">@MessageVisuals.Button2Text</MudButton>
        }
    </DialogActions>
</MudDialog>



@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public MessageType MessageType { get; set; }
    [Parameter] public EventCallback<MessageType> MessageTypeChanged { get; set; }
    [Parameter] public MessageVisuals MessageVisuals { get; set; }
    [Parameter] public EventCallback<string> MessageChanged { get; set; }
    private MudButton primaryButton { get; set; }

    public async Task SubmitHandler() => MudDialog.Close(DialogResult.Ok(true)); // Control returns to the line after DialogService.Show(...)

    public void CancelHandler() => MudDialog.Close(DialogResult.Cancel());

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
            await primaryButton.FocusAsync();
    }

}
